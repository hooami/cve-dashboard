import pymongo
from datetime import datetime, timezone
import os
import requests
import time

mongo = pymongo.MongoClient(os.environ['MONGO_URI'])
db = mongo["cve_storage"]
update_status = db['status']
cve_databases = db['cves']
epss_list = []
vendorlist = []
vendorproducts = []
hours = 12  

class FormatEntry:
    def __init__(self, entry):
        self.cveid = entry['id']
        self.source = entry['sourceIdentifier']
        self.published = datetime.strptime(entry['published'], "%Y-%m-%dT%H:%M:%S.%f")
        self.lastModified = datetime.strptime(entry['lastModified'], "%Y-%m-%dT%H:%M:%S.%f")
        self.vulnstatus = entry['vulnStatus']
        self.description = filterDescriptions(entry['descriptions'])
        if(self.vulnstatus != "Rejected"):
            self.metrics = entry['metrics']
            if not self.metrics:
                self.cvssdict = ['','','', -1]
            else:
                self.cvssdict = retrieveCVSSscore(entry['metrics'])
            try:
                self.weaknesses = entry['weaknesses']
            except KeyError:
                self.weaknesses = ''
            try:
                self.allconfigurations = entry['configurations']
                self.configs = handleProducts(self.allconfigurations)
            except KeyError:
                self.allconfigurations = ''
                self.configs = ['','','']
            self.references = handleReferences(entry['references'])

    def storeObject(self):
        # print(self.cveid)
        if (self.vulnstatus != "Rejected"):
            objdict = {
                "id" : self.cveid,
                "source": self.source,
                "published": self.published,
                "lastModified": self.lastModified,
                "status": self.vulnstatus,
                "description": self.description,
                "cvssSource": self.cvssdict[0],
                "cvssVersion": self.cvssdict[1],
                "cvssVector": self.cvssdict[2],
                "cvss": self.cvssdict[3],
                "allcpes": self.configs[0],
                "vendors": self.configs[1], 
                "products": self.configs[2],
                "references": self.references,
                "fullmetrics": self.metrics,
                "fullweaknesses": self.weaknesses,
                "fullconfigs": self.allconfigurations,
            }
        else:
            objdict = {
                "id" : self.cveid,
                "source": self.source,
                "published": self.published,
                "lastModified": self.lastModified,
                "status": self.vulnstatus,
                "description": self.description
            }
        return objdict

    def getCVEID(self):
        return self.cveid
        

def filterDescriptions(descriptions):
    for desc in descriptions:
        if desc['lang'] == 'en':
            description = desc['value']
            return description
    return ''

def retrieveCVSSscore(metrics):
    # print(metrics)
    primarycvss = next(iter(metrics.values()))[0]
    cvsssource = primarycvss['source']
    cvssversion = primarycvss['cvssData']['version']
    cvssvectorString = primarycvss['cvssData']['vectorString']
    cvssScore = primarycvss['cvssData']['baseScore']
    return [cvsssource, cvssversion, cvssvectorString, cvssScore]

def handleProducts(configurations):
    cpes = []
    vendors = []
    products = []
    for config in configurations:
        for node in config['nodes']:
            for cpe in node['cpeMatch']:
                cpes.append(cpe['criteria'])
                splitcpe = cpe['criteria'].split(':')
                vendors.append(splitcpe[3])
                products.append(splitcpe[4])
                vendorstore(splitcpe[3], splitcpe[4])
    return [list(set(cpes)), list(set(vendors)), list(set(products))]            

def handleReferences(references):
    referencelist = []
    for entry in references:
        referencelist.append(entry['url'])
    return referencelist

def vendorstore(key, value):
    try:
        pos = vendorlist.index(key)
        if value not in vendorproducts[pos]['products']:
            vendorproducts[pos]['products'].append(value)
    except ValueError:
        vendorlist.append(key)
        vendorproducts.append({'vendor': key, 'products': [value]})


def getupdatestatus():
    query = update_status.find_one({})
    print(query)
    return query

def updatedatabase(info, search = {}):
    update_status.find_one_and_update(search, info)

def updatedatabasecve(info, search= {}):
    cve_databases.find_one_and_update(search, info)

def cve_updater():
    get_time = update_status.find_one({}, {'_id': 0, 'cve_last_updated': 1})
    formatted_dt = get_time['cve_last_updated'].strftime('%Y-%m-%dT%H:%M:%S')
    ending_string = "%2B00:00"
    formatted_dt = formatted_dt + ending_string
    current_utctime = datetime.now(timezone.utc)
    current_time = current_utctime.strftime('%Y-%m-%dT%H:%M:%S')
    current_time = current_time + ending_string 
    
    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0/?resultsPerPage=2000&lastModStartDate={formatted_dt}&lastModEndDate={current_time}"
    x = requests.get(url)
    result = x.json()
    total = int(result['totalResults'])
    try:
        for vuln in result['vulnerabilities']:
            cve = FormatEntry(vuln['cve'])
            query = {'id': cve.getCVEID()}
            x = cve_databases.replace_one(query, cve.storeObject(), upsert= True)
    except KeyError as e:
        print(e)
        exit(0)
    if (total > 2000):
        for i in range(2000, total+2000, 2000):
            url = f"https://services.nvd.nist.gov/rest/json/cves/2.0/?resultsPerPage=2000&startIndex={i}&lastModStartDate={formatted_dt}&lastModEndDate={current_time}"
    updatedatabase({"$set": {'cve_last_updated': current_utctime}})
   

def storeinvendordb():
    moncollection = db['vendors']
    moncollection.insert_many(vendorproducts)
    
def downloadcve():
    start = 0  
    initial_request = requests.get("https://services.nvd.nist.gov/rest/json/cves/2.0/")
    initial_result = initial_request.json()
    total = int(initial_result['totalResults'])
    
    print("Beginning retrieval and parsing of CVE DB")
    for i in range (start, total + 2000, 2000):
        step = str(i)
        x = requests.get("https://services.nvd.nist.gov/rest/json/cves/2.0/?resultsPerPage=2000&startIndex=" + step)
        result = x.json()
        try:
            for vuln in result['vulnerabilities']:
                cve = FormatEntry(vuln['cve'])
                x = cve_databases.insert_one(cve.storeObject())
        except KeyError as e:
            print(str(i))
            print(e)
            exit(0)

        print(step + " done!")
    storeinvendordb()
    current_utc_datetime = datetime.now(timezone.utc)
    document = {
        'cve_last_updated': current_utc_datetime,
    }
    update_status.insert_one(document)


if __name__ == "__main__":
    while 1:
        try:
            if getupdatestatus() is None: # Empty database:
                downloadcve()
            else:
                print("Updating...")
                cve_updater()
            current_time = datetime.now().strftime("%d-%m-%Y %H:%M")
            print(f"CVE statistics last checked/updated at {current_time}")
            time.sleep(hours*60*60)
        except requests.exceptions.ConnectionError:
            print("No internet connection, retrying in 1 minute")
            time.sleep(60)
