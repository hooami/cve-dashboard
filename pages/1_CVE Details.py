import streamlit as st
import time
import pymongo
import pandas as pd
import plotly.express as px 
import os

st.set_page_config(page_title="CVEs", layout="wide")

@st.cache_resource
def init_connection():
    return pymongo.MongoClient(os.environ['MONGO_URI'])

client=init_connection()
db = client.cve_storage
cve = db.cves
epss = db['epss']

def getepss(cve):
    query = {
        cve: { '$exists': True },
    }
    documents = epss.find(query, {'_id': 0, 'date': 1, cve: 1})
    print(documents)
    if documents is not None:
        chart_details = []
        for doc in documents:
            format_date = doc['date']
            chart_details.append([format_date, doc[cve]['epss']])
        df = pd.DataFrame(chart_details, columns = ['Date', 'EPSS Score'])
        chart = px.line(df, x='Date', y= 'EPSS Score')
        chart.update_traces(textposition="top center")
        chart.update_layout(xaxis= dict(tickformat="%d %b"))
        return chart
    else:
        return None
    
def get_epss(cve):
    result = epss.find_one(sort=[('date', -1)])
    epss_score = ''
    epss_percentile = ''
    epss_score = str(result[cve]['epss'])
    epss_percentile = (result[cve]['pctl'])
    return epss_score, epss_percentile

def get_cvss_color(score):
    if score == 0.0:
        return "green"
    elif 0.1 <= score <= 3.9:
        return "yellow"
    elif 4.0 <= score <= 6.9:
        return "orange"
    elif 7.0 <= score <= 8.9:
        return "red"
    elif 9.0 <= score <= 10.0:
        return "darkred"
    return "black"

def retrieveCVE(id):
    output = cve.find_one({'id': id})
    return output

st.sidebar.write("Data collected from FIRST and NVD")

id = st.text_input("CVE Search", placeholder="CVE ID")
try:
    if id:
        output = retrieveCVE(id)
        cveid = output['id']
        st.header(cveid, divider='grey')
        st.write(f'NVD Link: https://nvd.nist.gov/vuln/detail/{cveid}')
        src = output['source']
        st.write(f'CVE Source: {src}')
        time = output['published'].strftime('%Y-%m-%d %H:%M:%S')
        update = output['lastModified'].strftime('%Y-%m-%d %H:%M:%S')
        st.write(f'Published: {time}')
        st.write(f'Updated: {update}')

        st.subheader('Description')
        st.write(output['description'])

        st.subheader('CVSS Details')
        version = output['cvssVersion']
        st.write(f'Version: {version}')
        score = output['cvss']
        color = get_cvss_color(score)
        st.write(f"<p>Score: <span style='color:{color}'>{score}</span></p>", unsafe_allow_html=True)
        vector = output['cvssVector']
        vector = vector.replace(':', '\\:')
        st.write(f'Vector: {vector}')

        try:
            epss_score, epss_percentile = get_epss(cveid)
            col1, col2 = st.columns([0.2, 0.8])
            col1.subheader('EPSS Details')
            col2.subheader('EPSS Score History')
            chart = getepss(id)
            if chart is not None:
                col2.write(chart)
            col1.write(f'Current EPSS Score: {epss_score}')
            col1.write(f'EPSS Percentile: {epss_percentile}')
        except KeyError as e:
            st.subheader('EPSS Details')
            st.write(f'No EPSS score available')

        st.subheader('References')
        count = 0
        for i in output['references']:
            count += 1
            st.write(i)
except TypeError:
    st.error("No results found!")